{"index":{"slug":"index","filePath":"index.md","title":"🍂常青藤","links":["TODO","生活复盘","工作记录","tech/常用代码小记","tech/部署代码小记","tech/学习TODO","BUG错题本","life/健康生活的个人实践","life/个人介绍","misc/独立游戏开发","tech/需求设计","tech/Kafka学习","tech/技术认知","tech/表结构设计规范","life/🍳做饭指南","life/生活中遇到的坑","倒数日","密钥库存"],"tags":[],"content":"\n你哪怕没留下，也留下了故事、作品、和不畏的底气。\n把握当下，认真、严谨、不骄、不躁。📝TODO\n寻找什么是有效的，重复它；发现什么是无效的，避免它。→ 我在拖延时间？生活复盘\n\n💼工作专用\n\n工作记录\n常用代码小记\n部署代码小记\n学习TODO\nBUG错题本\n\n📋近期任务\n\n健康生活的个人实践 肌肉健身 + 腹肌运动 + HIFI + 睡觉\n技术广度与深度的探索\n\n专注于广度（工作的项目 + 自学的项目）\n坚持每日打卡，每日要有产出 已经坚持9天-25/7/19\n复盘时间浪费在哪里？如何提高效率 # 巴菲特时间法则：专注20%的要事，坚决不做剩下80% 生活和职业，职业每天下班前去做，生活随时记录。\n\n\n个人介绍\n独立游戏开发\n第二语言\n阅读\n\n📖近期技术文章\n\n需求设计\nKafka学习\n技术认知\n表结构设计规范\n\n🏠近期生活文章\n\n🍳做饭指南\n生活中遇到的坑\n\n🧭私人记录\n\n图标emojipedia.org/ 可以直接问AI去要的？哈哈哈哈\n倒数日\n密钥库存\n\n😊个人管理\n\n人要坐直\n不要久坐，多站起来走走\n爱护眼睛、爱护身体\n\n📚近期书籍（专注于一本书籍）\n\n当下的力量\n认知觉醒\n被讨厌的勇气\n\n🎥近期电影\n\n罗小黑战记2 25/7/18 好看，最喜欢那种感觉了，我想当别人师傅，淋过雨，我想为别人撑伞。\n聊斋：兰若寺 25/7/12 我们国家动画技术水平越来越高了，我很开心就是以后会见到更多高质量的电影。而且我是热衷于技术的人，这种在全世界都顶尖的水平，一定付出难以想象的努力。如果自己也能依靠自己的能力创造出顶级水平的作品，那么我想，我不白来啊。\n恶意 - 很有现代教育意义 25/7/9\n侏罗纪世界 重生 -还行 25/7/8\n\n💖喜欢的古诗\n\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生（定风波 - 苏轼 ）\n\n🎶喜欢的人（排名不分先后）\n\n胡歌\n周杰伦\n米津玄师\n\n💡喜欢的名言\n\n人一辈子做对两件事就可以很富有：寻找什么是有效的，重复它；发现什么是无效的，避免它。我们不需要新的思想，我们只需要正确的重复。 ——— 查理芒格\n"},"life/index":{"slug":"life/index","filePath":"life/index.md","title":" 🌿生活","links":[],"tags":[],"content":"时间在羊毛毯上，打了个温柔的盹。"},"life/个人介绍":{"slug":"life/个人介绍","filePath":"life/个人介绍.md","title":"个人介绍","links":[],"tags":[],"content":"\n02/INFJ/十二月/摩羯座\n爱好：看电影、打游戏、听音乐\n"},"life/健康生活的个人实践":{"slug":"life/健康生活的个人实践","filePath":"life/健康生活的个人实践.md","title":"健康生活的个人实践","links":[],"tags":[],"content":"正式动工\n肌肉训练：一对哑铃练完全身，哑铃居家全身分化训练计划，哑铃全身训练合集_哔哩哔哩_bilibili\n腹肌训练：腹肌撕裂者9分钟跟练，每天3组。_哔哩哔哩_bilibili\n\n25-7-11\n\n先将将动作做标准\n形成循环（练六休一）\n单边11斤\n\n\n\n\n个人实践\n50%有氧运动走路7000步（Keep每天记录）+ 25%每天剧烈运动HITI12分钟 + 25%力量训练训练完组数。世卫组织成年人每周应该进行至少150-300分钟的中强度有氧活动；或至少75-150分钟的剧烈强度有氧活动；组合活动可以获得巨大的健康收益。额外的健康福利，每星期至少2天中等或者更高强度的肌肉强化活动，涉及所有主要肌群。\n最佳实践，成年人可以将每周中等强度有氧活动增加到300分钟以上；或进行150分钟以上的剧烈强度有氧活动；6天运动，1天休息，时间分配，75min剧烈运动 + 150有氧运动 + 二分化肌肉训练2次 + 三分化肌肉训练2次。\n具体时间为12HITI每天，24跑步每天（早上跑步 + 晚上跑步）要达到中等强度的有氧训练 + 二分化肌肉训练2次=4次，训练一组。\n思想来源\n\n程序员延寿指南HowToLiveLonger/README.md at main · geekan/HowToLiveLonger\n健康学习到150岁 - 人体系统调优不完全指南zijie0/HumanSystemOptimization: 健康学习到150岁 - 人体系统调优不完全指南\n新手版 MuscleWiki 中文健身网\n进阶版 MuscleWiki - Simplify your workout\n"},"life/生活中遇到的坑":{"slug":"life/生活中遇到的坑","filePath":"life/生活中遇到的坑.md","title":"生活中遇到的坑","links":[],"tags":[],"content":"\n房租可以谈的，中介费可以和房东一人一半，最好选择押一付一。水费4 水费0.7 已经很便宜了。找房子的事情可以不用着急的，可以慢慢来的。\n电脑哪些接口支持独显，要确定好，显示器一般都是只支持HDMI2.0和DP1.4，笔记本一般是HDMI2.1，也只有这个支持独显输出，HDMI2.0最多支持2K144Hz。所以买的时候一定要注意。\n自己手动拆开空调，去清洗空调的过滤网，需要什么工具呢，我碰到的空调不需要，直接可以抓着下面直接打开。\n江苏25年暑假的时候每天早上九点关注地方本地宝发送电影，可以30优惠看电影，很不错。\n"},"life/🍳做饭指南":{"slug":"life/🍳做饭指南","filePath":"life/🍳做饭指南.md","title":"🍳做饭指南","links":[],"tags":[],"content":"以后再说吧，近两年没空，但是一定会学的，25/7/12\n\nHow To Cook\n食用手册\n"},"misc/index":{"slug":"misc/index","filePath":"misc/index.md","title":"🧶杂物","links":[],"tags":[],"content":"所有沉默的尘埃，开始轻轻歌唱。"},"misc/独立游戏开发":{"slug":"misc/独立游戏开发","filePath":"misc/独立游戏开发.md","title":"独立游戏开发","links":[],"tags":[],"content":"美术\n\n资源\n\nGodot主题：github.com/passivestar/godot-minimal-theme\njetbrains Mono主题：jetbrains mono\n游戏设计模式 Game Programming Patterns\n独立游戏开发的资源导航站：game.indiehubs.org\nFIRE(经济独立，提前退休)资源导航站：fire.indiehubs.org\n独立开发初学者指南A Beginner’s Guide to Indie Development : r/gamedev\nGameJamGame jams - itch.io\n书籍阅读 ：游戏设计艺术 体验引擎 游戏机制\n"},"recent":{"slug":"recent","filePath":"recent.md","title":"工作导航","links":["tech/常用代码小记","工作记录","25-7","tech/部署代码小记"],"tags":[],"content":"\n常用代码小记\n工作记录\n\n25-7\n\n\n部署代码小记\n\n"},"tech/Bug错题本":{"slug":"tech/Bug错题本","filePath":"tech/Bug错题本.md","title":"Bug错题本","links":[],"tags":[],"content":"\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? =&gt; --privileged=true 是 Docker 容器运行时的一个参数，表示以 特权模式（Privileged Mode） 运行容器。在windows上部署portainer容器管理平台发生的问题。\n云服务器和Windows的Docker部署FRP内网穿透，但是连接不到本地IDEA启动的Java项目？1.云服务器开放端口 2.将frp客户端使用宿主机局域网IP，也可以是host.docker.internal（是你在容器或 WSL2 中访问宿主 Windows 的“通用别名） 3.关闭Windows防火墙 4.让Java项目监听所有IP\n部署项目时候遇到的问题：1.后端服务与MySQL数据库不在同一个网络中，会造成权限访问的问题。2.将宿主机的13306端口映射到容器内部的3306端口时，如果后端服务是用Docker部署的，可以用MySQL作为Host进行DNS解析，但是必须用3306作为端口进行访问，否则就会出现1的报错。3.Redis和MySQL启动时，要有让外界访问的相关配置，否则无法连接，MySQL会跟版本有关系。4.有些镜像启动后需要获取Docker权限时，可以配置privileged: true。5.构建相同镜像的时候，需要将其前一个镜像删除掉，可以直接写在build.sh脚本中。6.切换配置文件可以直接在yml中设置，也可以通过docker-compose中的环境切换7.遇到解决不了的问题，可以回头看看视频，也可以逛逛贴吧，也可以出去多走走，有时候可能陷在了死胡同里面。8.明天休息一天。\n"},"tech/Docker部署遇到的问题":{"slug":"tech/Docker部署遇到的问题","filePath":"tech/Docker部署遇到的问题.md","title":"Docker部署遇到的问题","links":[],"tags":[],"content":""},"tech/Kafka学习":{"slug":"tech/Kafka学习","filePath":"tech/Kafka学习.md","title":"Kafka学习","links":[],"tags":[],"content":"【布客】kafka 中文翻译\n入门\n\n事件流是以事件流形式从数据库、传感器、移动设备、云服务和软件应用程序等事件源实时捕获数据的实践。\n可以实时跟踪和监测汽车、物流等，可以持续捕获和分析来自物联网或其他设备的传感器数据。\n三个 关键功能\n\n发布和订阅事件流\n持久可靠地存储事件流\n在事件发生时或回顾性处理事件流\n\n\nKafka是如何工作的？Kafka是一个分布式系统，由通过高性能TCP网络协议进行通信的服务器和客户端组成。它可以部署在本地和云环境中的裸机硬件、虚拟机和容器上。\n主要概念和术语：\n\n生产者是将事件写入到Kafka的客户端应用程序，而消费者是订阅这些事件的客户端应用程序。彼此完全解耦且互不可知，高可扩展性的关键设计元素。\n主题（事件存储并持久化的地方），事件在使用后不会被删除，你可以通过每个主题的配置来定义kafka应保留事件的事件，之后旧事件将被丢弃。不论数据有多大，性能恒定。主题是分区的。\n\n\n\n设计\n\n动机：充当统一平台来处理大公司可能拥有的所有实时数据源。\n\n高吞吐量支持大容量事件流\n妥善处理大量积压数据\n处理低延迟交付\n机器故障时保证容错\n\n\n持久化\n\n创新点\n\n顺序IO可以接近网络速度\n依靠OS缓存比自行管理更高效\n简单追加日志的O(1)操作在磁盘上表现最佳\n\n\n优势：允许长时间保留消息，而传统系统通常在消费后立即删除。为消费者提供更大灵活性（如重新消费、新消费者加入等）。\n\n\n效率（如何实现高效处理数据？）\n\n批量处理（批处理是核心优化）\n零拷贝技术（减少数据复制）\n智能缓存\n压缩传输（省带宽）\n\n\n"},"tech/index":{"slug":"tech/index","filePath":"tech/index.md","title":"💻技术","links":[],"tags":[],"content":"一行代码，便是一个宇宙的呼吸。"},"tech/学习TODO":{"slug":"tech/学习TODO","filePath":"tech/学习TODO.md","title":"学习TODO","links":[],"tags":[],"content":"\n MVC模型画图，分别代表什么意思\n 画支付宝支付业务流程图\n"},"tech/常用代码小记":{"slug":"tech/常用代码小记","filePath":"tech/常用代码小记.md","title":"常用代码小记","links":[],"tags":[],"content":"Python独立环境中的依赖安装\n安装一个UV\npip install uv\nuv venv 创建一个虚拟环境\nBash&gt; source .venv/Scripts/activate 激活虚拟环境\nWindows&gt;.venv\\\\Scripts\\\\Activate.ps1\nBash&gt; which python 检查虚拟环境是否激活\nWindwos&gt;Get-Command python\nuv pip install -r requirements.txt -i &lt;pypi.tuna.tsinghua.edu.cn/simple从&gt; requirements.txt 安装\npython run.py 运行程序\ndeactivate 退出虚拟环境\n \n将依赖打包成TXT\nuv pip freeze &gt; requirements.txt\n \nGit工作流\ngit flow init\n \ngit flow release start 1.0.0 temp-release\n \ngit push origin prod  # 推送 prod 分支\ngit push origin main  # 推送 main 分支\ngit push --tags       # 推送标签\n \n# 提交：主要 type\nfeat:     增加新功能\nfix:      修复bug\n \n# 提交：特殊 type\ndocs:     只改动了文档相关的内容\nstyle:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号\nbuild:    构造工具的或者外部依赖的改动，例如webpack，npm\nrefactor: 代码重构时使用\nrevert:   执行git revert打印的message\n \n# 提交：暂不使用type\ntest:     添加测试或者修改现有测试\nperf:     提高性能的改动\nci:       与CI（持续集成服务）有关的改动\nchore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动\n \n# 注释：类注释配置\n/**\n* @description: \n* @author: ${USER}\n* @date: ${DATE}\n*/\n多GitHub账户\n# 取消全局 用户名/邮箱 配置\ngit config --global user.name\ngit config --global user.email\n \ngit config --global user.name &quot;liyaoyu&quot;\ngit config --global user.email &quot;yaoyu.li@icasasystem.com&quot;\n \n# 单独为每个repo设置 用户名/邮箱\ngit config user.name &quot;liyaoyu&quot; ; git config user.email &quot;erenjaegerking@qq.com&quot;\ngit config user.name &quot;liyaoyu&quot; ; git config user.email &quot;yaoyu.li@icasasystem.com&quot;\n \n# 单独查看用户名和邮箱\ngit config get user.name\ngit config get user.email "},"tech/技术认知":{"slug":"tech/技术认知","filePath":"tech/技术认知.md","title":"技术认知","links":[],"tags":[],"content":"爱海贼的无处不在的心得\n做个笔记！！！\n转载：做好当下，布局未来：写给每一个觉得“实习没价值”的程序员\n第一章：什么是“做好当下”？\n\n把你的项目吃透，不是会写接口，而是懂业务\n\n把你目前经手的所有接口对应的数据库表列出来，理解每张表是干什么的；\n把整个CRM系统的模块结构画一张图（画给自己看）；\n问问你的主管或者项目经理：“我们这个CRM系统，有哪些地方是公司特别重视的？”（了解业务重点）\n研究一下开源的CRM系统或商业的CRM系统，比如悟空CRM，看看你们公司跟他们设计的异同。\n\n\n把每个“看似简单”的接口写到极致\n\n有没有处理幂等性？是不是重复提交就挂了？\n有没有用户权限校验？数据隔离？\n参数校验和异常处理够严谨吗？\n是不是考虑了高并发下数据一致性？\n有没有配好监控？出错了好排查？\n测试用例是否覆盖边界情况？\n接口多个人操作的时候会出现覆盖情况吗？\n接口如果对接了第三方，自己写的HTTP代码支持重试吗？\n接口业务层处理完，如果还需要异步发送消息如何设计？\n你有benchmark过这个接口的性能瓶颈吗？\n这个接口的业务目标是啥？\n有没有设计成一个通用模板（比如批量新增 vs 单个新增）？\n如果让我重构，我能否抽象出更优的代码结构？\n\n\n学会逐渐从”写接口”到”懂业务”\n\n画系统架构图\n追问五个‌为什么（1. “这个接口给谁用？→ 销售部门 → 用来做什么？→ 记录客户拜访 → 为什么重要？→ 涉及绩效考核…“）\n对比行业方案\n\n\n‌建立”问题雷达”：把每个bug变成知识库\n\n给每个bug贴标签：是业务理解偏差？代码逻辑漏洞？还是数据边界问题？\n做”错题本”：记录典型bug场景+解决方案（比如用Notion建表格）\n主动复盘：每周找出重复出现的3类问题，针对性学习\n举个实例：某实习生发现”客户状态同步延迟”的bug，深挖后发现是消息队列堆积导致的，后来他不仅解决了问题，还：\n\n整理了RabbitMQ常见故障处理手册\n给团队做了次”消息队列保障机制”的分享\n把这个案例写成技术博客\n\n\n\n\n\n第二章：什么是“布局未来”\n\n明天的你，要去哪？你知道吗？\n所有技术最终都能“AI化”，你敢往上叠层吗？\n看懂别人的代码，比写新代码更重要\n横向偷师\n\n\n\n‌蹭会议*：主动申请参加需求评审会，哪怕只是旁听\n\n\n‌读PR‌：看同事的代码提交，重点看fix/refactor类的改动\n‌问运维‌：找运维同学喝奶茶，问”我们系统最常出什么故障？“\n\n\n\n第三章 ：简历如何写出深度？\n\n项目描述要「结果＋指标＋你做的事情＋技术栈」\n简历关键词：突出“工程意识”与“业务洞察”\n\n工程意识（Engineering Mindset）：\n\n幂等性设计、并发控制、接口监控、限流熔断、重试机制、回滚补偿……\n写在职责里，让对方能在一句话里读出你对高质量工程的追求。\n\n\n业务洞察（Business Insight）：\n\n客户线索生命周期、销售漏斗分析、渠道 ROI、客户分类模型、复购预测……\n写在项目简介或成果里，让对方知道你不仅写代码，还能理解行业和业务价值。\n\n\n\n\n用开源或业界对标项目为简历加分\n\n第四章：真实行动建议清单\n\n\n不要把所有动作都堆在一天做完，分散到每周或每月，都能持续积累。\n保持「一周一个小产出」的节奏，无论是文档、PR、Demo，都能体现你的动力和执行力。\n产出可以是博客、内部分享会 PPT、GitHub 仓库、简历更新，形式不限，目的都是留痕。\n\n第五章：每日精进计划\n持续成长，就靠“天天做一点，滴水穿石”。结合我自己的经验和网友的经验，可以根据自己的工作节奏和空闲时间做微调，但原则是“每天至少留出 30 分钟到 1 小时专注提升”。\n1. 时间分配建议（每日）\n\n早晨30分钟：‌\n\n读一段开源项目代码（推荐：Spring Boot/MyBatis源码注释版）\n记录1个业务关键词（如”线索孵化率”），下班前找人请教\n‌午休15分钟：‌\n用ChatGPT问：“CRM系统中接口设计有哪些隐藏坑？”\n把答案整理成Markdown笔记\n‌下班前30分钟：‌\n选一个老接口，用JMeter做压测（哪怕只测10次）\n截图”优化前/后”的QPS数据\n‌周末2小时：‌\n在本地启动个Demo项目，试水AI功能（推荐：Spring AI+Ollama本地模型）\n\n2. 每周专项主题\n为了避免每天内容过于分散，建议每周聚焦一个专项主题，持续 5 个工作日，然后下周切换。主题举例如下：\n\n接口健壮性\n\n周一：参数校验和异常处理最佳实践\n周二：幂等性设计方式对比（Token、幂等表、业务去重等）\n周三：高并发场景下的锁与队列（Redis 分布式锁、消息队列削峰）\n周四：接口监控与告警（Prometheus + Grafana, 日志埋点）\n周五：实践：对自己写过的一个接口进行“鲁棒性全家桶”优化\n\n\n数据库调优\n\n周一：索引原理与常见误区\n周二：Explain 分析与优化思路\n周三：分库分表与水平/垂直拆分策略\n周四：读写分离与缓存预热\n周五：实践：对业务场景做一次全流程调优，并写性能报告\n\n\n微服务与架构设计\n\n周一：微服务拆分原则与边界划分\n周二：服务注册与发现（Eureka、Consul）\n周三：API 网关（Zuul、Spring Cloud Gateway）\n周四：链路追踪（Sleuth + Zipkin）\n周五：实践：设计一个“CRM 订单服务 + 客户服务”小系统并绘制架构图\n\n\nAI × CRM\n\n周一：了解主流开源 embedding知识和RAG知识、框架等\n周二：用Spring AI或Spring AI Alibaba 构建小型 CRM 数据索引\n周三：用本地 LLM 做客户意图分类 Demo\n周四：用 Langchain Agent 实现“下一步销售建议”小机器人\n周五：总结：写一篇「CRM 项目 AI 化实践」技术笔记\n\n\n\n3. 每日复盘模板\n每天坚持写 3 条日终复盘，记录以下要点：\n\n今日完成：今天在项目/学习中做了哪些事情？\n收获与问题：学到了什么？遇到了哪些问题，暂时还没解决？\n明日计划：明天要做什么？哪个接口要再优化？哪个主题要继续？\n\n示例：\n2025-07-09\n今日完成：在“线索分配”接口中加了幂等校验；阅读完《Redis 分布式锁实战》；写了 500 字优化总结。\n收获与问题：掌握了 Redisson 的锁超时方案；遇到一个死锁场景，需进一步调试。\n明日计划：复盘那个死锁 issue；阅读并实践 API 网关限流配置。\n4. 利用工具提高效率\n\n书签与笔记：用浏览器书签分类存放关键文档，用有道云笔记或者枫叶云笔记做每日/每周笔记。\n代码片段库：把常用的幂等、鉴权、限流代码片段整理到 Snippet 工具。\n定时提醒：用日历或 Todo 工具设每日/每周提醒，确保复盘和阅读不被工作 “淹没”。\n\n第六章：AI 加持业务系统\n\n从业务痛点出发：AI 在 CRM 中能解决什么？\n\n第七章：业务经验如何转化为面试竞争力\n\n用 STAR 方法说项目故事\n\nSituation：我在一个大存储公司实习，负责 CRM 系统中客户线索管理模块。\nTask：公司希望提升线索处理效率并减少人工误操作。\nAction：\n\n设计幂等机制，避免重复提交；\n用 AOP 统一处理鉴权逻辑，删除手工权限校验；\n编写单元测试与自动化测试覆盖；\n穿透日志 &amp; Prometheus 监控，加入异常告警；\n后来做了 AI Demo，为销售生成跟进建议。\n\n\nResult：\n\n处理效率提升 30%，月线索量提高 1,500 条；\n接口异常率下降 50%，运维工单少一半；\nAI Demo 成果撰写成博客，阅读量 &gt;1,500；\n\n\n\n\n面试前的“项目梳理术”：从高层到细节\n在面试前做一个项目梳理流程：\n\n挑重点项目：选 CRM 项目，因为它涉及业务+技术+AI能力。\n列功能模块：梳理模块图，理清职责边界。\n提前演练讲稿：画流程图，用录屏练习，避免表达不清。\n预判问题：接口如何幂等？高并发如何处理？AI 模型选型？准备好回答\n熟练代码结构：了解目录结构与关键算法逻辑，方便现场应答\n\n\n突出「业务 + 技术」双重价值\n\n面试官最喜欢的答案，是“你不仅用技术，还懂业务”。示例：\n我不仅写接口，还了解 CRM 的销售漏斗模型，包括线索获取 → 分配 → 跟进 → 成交，每个阶段我都做了数据监控，比如分配延迟、无效线索比率等。\n这种回答，能同时击中“对业务敏感”“有系统思考”“有数据意识”三大面试评估项。\n\n面试问答也是双向的双向沟通\n\n面试不仅你在说，面试官也在观测你的好奇心：\n\n面试结束时，准备 3–5 个问题提问，例如“你们 CRM 系统的下一步规划是什么？有没有 AI 方向的探索？”\n这会让面试官知道：你不仅胜任技术，还关注产品、企业成长。\n\n这套方法应用在 CRM 项目经验里，会让你在 30 分钟通话里，展现你的技术深度、业务敏锐、学习意愿、沟通意识。\n第八章：团队成长秘籍——在实习中自驱学习、创造价值\n海贼的话\n\n先不要想着先看代码，而是先把项目的基本业务和基本功能梳理下，先理解业务，形成产出\n理解后，在看代码，看代码先看pom.xml，梳理 下这个项目用到了哪些依赖、哪些组件梳理出来，形成产出\n在通过数据库客户端导出数据库表结构，对自己感兴趣的业务模块、功能，找到相关界面，先从界面定位出来后端接口和和表，先从自己感兴趣的功能模块，入手。本质就是梳理某个功能的CRUD流程\n去问问领导，公司内部是否有使用AI，如果有和允许，也是阅读的帮手\n这种核心要做的一件事就是:必须强迫自己每天输出至少一份总结文档，即使公司有了对应的说明，但是他不是自己的内化的知识，坚持一阵，这样才能把公司交付给自己的东西演变成自己的，大部分学生去实习，还是有些外包思维严重的，下班学习高大上的内容，不学习公司的业务和技术。 工作了1-3个月，没有总结和沉淀几份文档，这个是很危险的，所以非常建议这个小伙子，从今天开始，每天都能沉淀内容\n直接说到我的痛点了，我在上一家公司每天下班后就学习高大上的内容。结果后面单独负责一个项目的时候，有的业务都没搞清楚，做的一塌糊涂。后面意识到这种问题，每一周都会输出相关模块的er图结构，业务逻辑流程等。所以刚进入公司的一定要先熟悉公司业务，一定要先熟悉公司业务，一定要先熟悉公司业务。\n\n12条程序员入职后快速掌握业务与技术的经验\n\n12条程序员入职后快速掌握业务与技术的经验\n\n\n工作产出方面\n\n日常总结与输出\n问题复盘与记录\n\n\n项目学习方面\n\n环境搭建与熟悉\n项目依赖梳理\n尝试实战练习\n主动代码质量分析-SonarQube进行静态代码质量分析\n\n\n业务熟悉方面\n\n全流程业务梳理\n积极沟通与融入\n主动了解与参与业务\n态度\n日常积极参与技术讨论\n\n\nMentor方面\n\n找能知道你的Mentor\n\n\n"},"tech/表结构设计规范":{"slug":"tech/表结构设计规范","filePath":"tech/表结构设计规范.md","title":"表结构设计规范","links":[],"tags":[],"content":"\nMySQL | 小傅哥 bugstack 虫洞栈\n\n设计规范\n\n✨：建表的时候需要注意    🌟：查询，日常代码编写的时候    ⭐：难度\n1. 建表相关规范（⭐）\n\n1.库名、表名、字段名，使用小写和下划线 _ 分割。✨\n2.库名、表名、字段名，不超过12个字符。默认支持64个字符。✨\n3.库名、表名、字段名，见名知意，建议使用名词而不是动词。✨\n4.使用 InnoDB 存储引擎。支持；事务、锁、高并发 性能好。✨\n5.推荐使用 utf8mb4 可以存emoji。✨\n6.单表字段数，建议不超过40个。✨\n\n2. 字段相关规范（⭐）\n\n1.整型定义中不显示设置长度，如使用 INT，而不是INT(4) （无意义）✨\n2.存储精度浮点数，使用 DECIMAL 替代 FLOAT、DOUBLE（避免精度丢失）✨\n3.所有字段，都要有 Comment 描述✨\n4.所有字段应定义为 NOT NULL✨\n5.超过2038年，用DATETIME存储（DATESTAMP只到2038）✨\n6.短数据类型 0~80 选用 TINYINT 存储✨\n7.UUID 有全局唯一统一字段属性，适合做同步ES使用。✨\n8.IPV4，用无符号 INT 存储（INT UNSIGNED（INET_ATO（）））✨\n9.IPV6，用VARBINARY存储（VARBINARY（16））✨\n10.JSON MySql 8.x 新增特性✨\n11.update_time 设置 on update 更新属性（设置ON UPDATE CURRENT_TIMESTAMP）✨\n\n3. 索引相关规范\n\n1.要求有自增ID作为主键，不要使用随机性较强的 order_id 作为主键，会导致innodb内部page分裂和大量随机I/O，性能下降。（避免随机主键如 UUID 导致页分裂）✨\n2.单表索引建议控制在5个以内，单索引字段数不超过5个。注意：已有idx(a, b)索引，又有idx(a)索引，可以把idx(a)删了，浪费空间，降低更新、写入性能。单个索引中，每个索引记录的长度不能超过64KB。（单表索引和单索引字段数≤ 5   |   避免冗余索引）✨\n3.利用覆盖索引来进行查询操作，避免回表。另外建组合索引的时候，区分度最高的在最左边。（覆盖索引   |   最左前缀原则）🌟\n4.select(count(distinct(字段)))/count(id) = 1 的区分度，更适合建索引。在一些低区分度的字段，例如type、status上建立独立索引几乎没意义，降低更新、写入性能。（低区分度字段（如status）不适合单独建索引）✨\n5.防止因字段不同造成的隐式转换，导致索引失效。（禁止索引失效操作）🌟\n6.更新频繁的字段，不要建索引。✨\n\n4. 使用相关规范\n\n1.单表数据量不超过500万行，ibc 文件大小不超过 2G （容易引发性能问题（如慢查询、索引失效、备份变慢））\n2.水平分表用取模，日志、报表类，可以用日期\n3.单实例表数目小于 500（会拖慢information_schema查询，导致元数据管理和权限加载变慢）\n4.alter表之前，先判断表数据量，对于超过100W行记录的表进行alter table，必须在业务低峰期执行。因为alter table会产生表锁，期间阻塞对于该表的所有写入（写入会被阻塞）\n5.SELECT语句必须指定具体字段名称，禁止写成 “*”select * 会将不需要读的数据也从MySQL里读出来，造成网卡压力，数据表字段一旦更新，但model层没有来得及更新的话，系统会报错（增加网络和内存负担、可读性差，不利于代码维护和字段追踪）\n6.insert语句指定具体字段名称，不要写成 insert into t1 values(…)（防止字段顺序变更导致插入错误，可读性更高，避免遗漏或错位）\n7.insert into…values(XX),(XX),(XX).. 这里XX的值不要超过5000个，值过多会引起主从同步延迟变大。（占用大量内存，导致主从延迟）\n8.union all 和 union，不要超过5个子句，如果没有去重的需求，使用union all性能更好。（UNION需要去重操作（排序+比较），UNINO ALL 不去重，性能好）\n9.in 值列表限制在500以内，例如 select… where userid in(….500个以内…)，可以减少底层扫描，减轻数据库压力。（实际上是多个OR操作，大量值会导致索引失效或扫描变慢）\n10.除静态表或小表（100行以内），DML语句必须有where条件，且尽量使用索引查找（防止误删/更新全表数据、快速定位，避免全表扫描）\n11.生产环境禁止使用 hint，如 sql_no_cache，force index，ignore key，straight join等。 要相信MySQL优化器。hint是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的。\n12.where条件里，等号左右字段类型必须一致，否则会造成隐式的类型转化，可能导致无法使用索引（类型不一致会导致MySQL隐式转换，如int=‘100’会转换类型，可能导致索引失效；可通过explain检查是否使用了索引）\n13.生产数据库中强烈不推荐在大表执行全表扫描，查询数据量不要超过表行数的25%，否则可能导致无法使用索引（查询数据量过大，MySQL判断不如全表扫描划算，导致不走索引）\n14.where子句中禁止只使用全模糊的LIKE条件进行查找，如like ‘%abc%’，必须有其他等值或范围查询条件，否则可能导致无法使用索引（前缀模糊无法使用索引）\n15.索引列不要使用函数或表达式，如 where length(name)=10 或 where user_id+2=1002，否则可能导致无法使用索引（MySQL在执行前对字段处理一遍，失去索引使用机会）\n16.减少使用or语句 or有可能被 mysql优化为支持索引，但也要损耗 mysql 的 cpu 性能。可将or语句优化为union，然后在各个where条件上建立索引。如 where a=1 or b=2 优化为 where a=1… union …where b=2, key(a),key(b) 某些场景下，也可优化为 in\n17.分页查询，当limit起点较高时，可先用过滤条件进行过滤。如 select a,b,c from t1 limit 10000,20; 优化为 select a,b,c from t1 where id&gt;10000 limit 20;（前者会先扫描前10万行再取后20行；后者会跳过扫描）\n18.同表的字段增删、索引增删等，合并成一条DDL语句执行，提高执行效率，减少与数据库的交互。（合并表结构变更的DDL，最好一次性完成）\n19.replace into 和 insert on duplicate key update 在并发环境下执行都可能产生死锁（后者在5.6版本可能不报错，但数据有可能产生问题），需要catch异常，做事务回滚，具体的锁冲突可以关注next key lock和insert intention lock\n20.TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。说明： TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。\n"},"tech/部署代码小记":{"slug":"tech/部署代码小记","filePath":"tech/部署代码小记.md","title":"部署代码小记","links":[],"tags":[],"content":"\n一点一点的积累，不要一口气吃一个大胖子\n\nPortainer\ndocker run -d --restart=always --privileged=true --name portainer -p 9010:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer \nMySQL\ndocker network create my-network\n \ndocker run -d \\\n  --name mysql \\\n  --restart always \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -p 13306:3306 \\\n  -v ./mysql/sql:/docker-entrypoint-initdb.d \\\n  --health-cmd &quot;mysqladmin ping -h localhost&quot; \\\n  --health-interval 5s \\\n  --health-timeout 10s \\\n  --health-retries 10 \\\n  --health-start-period 15s \\\n  --network my-network \\\n  mysql:8.0.32 \\\n  --default-authentication-plugin=mysql_native_password\n \nRedis\ndocker run -d \\\n  --name redis \\\n  --hostname redis \\\n  --restart always \\\n  --privileged \\\n  -p 16379:6379 \\\n  -v ./redis/redis.conf:/usr/local/etc/redis/redis.conf \\\n  --network my-network \\\n  --health-cmd &quot;redis-cli ping&quot; \\\n  --health-interval 10s \\\n  --health-timeout 5s \\\n  --health-retries 3 \\\n  redis:6.2 \\\n  redis-server /usr/local/etc/redis/redis.conf\nDocker部署时候的问题\n1. 启动服务\ndocker-compose up\n后台运行：docker-compose up -d\n强制重建镜像：docker-compose up --build\n只启动特定服务：docker-compose up service1 service2\n2. 停止服务\ndocker-compose down\n同时删除卷：docker-compose down -v\n同时删除镜像：docker-compose down --rmi all\n3. 查看服务状态    \ndocker-compose ps\n4. 查看运行日志\ndocker-compose logs\n查看特定服务日志：docker-compose logs service_name\n实时跟踪日志：docker-compose logs -f\n \n服务管理\n5. 启动/停止/重启服务\ndocker-compose start\ndocker-compose stop\ndocker-compose restart\n6. 暂停/恢复服务\ndocker-compose pause service_name\ndocker-compose unpause service_name\n \n镜像管理\n7. 构建镜像\ndocker-compose build\n强制重建：docker-compose build --no-cache\n只构建特定服务：docker-compose build service_name\n8. 拉取镜像\ndocker-compose pull\n \n实用命令\n9. 执行命令\ndocker-compose exec service_name command\n示例：进入容器bash\ndocker-compose exec web bash\n10. 查看服务端口\ndocker-compose port service_name port_number\n11. 查看服务配置\ndocker-compose config\n验证配置：docker-compose config -q\n12. 缩放服务实例\ndocker-compose scale service_name=num_instances\n \n环境管理\n13. 环境变量文件\n默认使用 .env 文件，或指定：\ndocker-compose --env-file .env.dev up\n14. 使用不同配置文件\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up\n \n常用组合命令\n完全重建并启动服务：docker-compose down &amp;&amp; docker-compose up -d --build\n查看服务资源使用：docker-compose top\n删除所有停止的容器和未使用的镜像：docker-compose down --rmi all -v\n \n部署点歌系统时碰到的相关问题\n1.image是构建时候容器名字和标签 container_name是要启动镜像的名字\n2.docker-compose启动的时候会创建一个默认的网络imusic_default\n3.后端服务启动失败（检查日志发现mysql数据库有问题：docker-compose怎么进入mysql容器中去执行相关的命令）\ndocker-compose exec imusic-mysql mysql -u root -p\ndocker-compose exec imusic-mysql ls -la /docker-entrypoint-initdb.d/ 查看sql语句是否存在容器中\ndocker-compose exec imusic-mysql mysql -u root -p -e &quot;use ry-vue;source /docker-entrypoint-initdb.d/ry.sql;&quot;&quot;加载sql到mysql数据库中\n \n怎么重建docker-compose镜像 \n# 停止服务并删除所有相关资源（包括未使用的镜像和卷）\ndocker-compose down --rmi all -v\ndocker compose down --rmi all -v\n# 完整重建\ndocker-compose up -d --build \ndocker compose up -d --build \ndocker-compose logs -f &gt; compose.log 2&gt;&amp;1 &amp;\n \n后端服务的mysql地址要改成容器名字imusic-mysql，缓存redis要改成imusic-redis，文件存储minio改成imusic-minio\n数据库脚本头部需要添加set names &#039;utf8&#039;;（防止乱码）\n \n查看nginx容器内有没有数据 docker exec -it imusic-nginx sh -c &quot;ls -la /usr/share/nginx/html/&quot;\n \nwindows怎么启动jar包后台以及保存日志？\njavaw -jar your-app.jar &gt; app.log （将标准输出重定向到 app.log 文件。） 2&gt;&amp;1 （将错误输出合并到标准输出（即日志文件）。）\n \nLinux怎么启动jar包后台以及保存日志？\nnohup java -jar your-app.jar &gt; app.log 2&gt;&amp;1 &amp;\nnohup：防止进程因终端关闭而被终止（忽略 SIGHUP 信号）。\n&gt; app.log：将标准输出（stdout）重定向到 app.log 文件。\n2&gt;&amp;1：将标准错误（stderr）合并到标准输出（即日志文件）。\n&amp;：后台运行。\n查看日志\n    tail -f app.log  # 实时查看日志\n    cat app.log      # 查看完整日志\n停止进程\n    查找进程 ID：ps aux | grep &quot;java -jar your-app.jar&quot;\n    终止进程：kill -9 &lt;PID&gt;\n使用 systemd 管理服务（推荐生产环境）\n1.没有重建镜像，启动的还是以前的\n2.将mysql5.4换成8.4的时候，要清空原来的mysql相关配置数据\n3.后端怎么根据后缀启动相关的配置文件\n4.替换jar包的时候，名字不对，启动了之前未清理的jar包，导致发生错误\n5.前端怎么根据后缀编译相关的dist RuoYi-Vue/vue项目配置env_ruoyi vue 切换开发和正式环境 env-CSDN博客\n6.镜像标签中间全角字符直接报错\n7.在mysql中直接操作的话，需要;结尾\n8.mysql5.4不支持mysql8的语法，Unknown collation: &#039;utf8mb4_0900_ai_ci&#039;\n9.403页面访问的时候，发现nginx容器中没有页面那个目录，复制不进去，挂载数据卷在构建之后，就把空的数据卷挂载到html中，就会把复制进去的文件给覆盖掉（大坑）\n \ncompose常用服务配置参考 docker-compose教程（安装，使用, 快速入门）-CSDN博客\nbuild\n    可以指定包含构建上下文的路径，如果你同时指定image和build，则compose会通过build指定的目录构建容器镜像，而构建的镜像名为image中指定的镜像名和标签。\n    context 包含Dockerfile文件的目录路径，或者是git仓库的URL。\n    dockerfile 备用Docker文件。\n    args 添加构建镜像的参数，环境变量只能在构建过程中访问。 \nimage\n    指定启动容器的镜像，可以是镜像仓库/标签或者镜像id（或者id的前一部分） 。如果镜像不存在，Compose将尝试从官方镜像仓库将其pull下来，如果你还指定了build，在这种情况下，它将使用指定的build选项构建它，并使用image指定的名字和标记对其进行标记。\ncontainer_name\n    指定一个自定义容器名称，而不是生成的默认名称。由于Docker容器名称必须是唯一的，因此如果指定了自定义名称，则无法将服务扩展到多个容器。\nvolumes\n    卷挂载路径设置。\ncommand\n    覆盖容器启动后默认执行的命令。\nlinks\n    链接到另一个服务中的容器。 \nexternal_links\n    链接到docker-compose.yml 外部的容器，甚至并非 Compose 管理的容器。\nexpose\n    暴露端口，但不映射到宿主机，只被连接的服务访问。仅可以指定内部端口为参数\nports\n    暴露端口信息。 常用的简单格式：使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\nrestart\n    no是默认的重启策略，在任何情况下都不会重启容器。 指定为always时，容器总是重新启动。 如果退出代码指示出现故障错误，则on-failure将重新启动容器。\nenvironment\n    添加环境变量。\npid\n    将PID模式设置为主机PID模式。\ndns\n    配置 DNS 服务器。\n    \n \nCompose的使用三步：\n    使用 Dockerfile 自定义应用程序的环境，便于在任何地方复制它；\n    使用 docker-compose.yml 定义构成的应用程序的服务，便于隔离环境中一起运行；\n    运行 docker-compose up 命令启动并运行整个应用程序。\n "},"tech/需求设计":{"slug":"tech/需求设计","filePath":"tech/需求设计.md","title":"需求设计","links":[],"tags":[],"content":"\n详细的产品PRD交互流程，比如说用户、前端页面、后端服务、微信公众号登录、支付宝支付。\n根据产品PRD提供的业务UI和流程，分析用户会有的行为，根据行为画出用户用例图。\n系统建模\n细节的流程设计，使用UML画执行流程图。最终代码也就是这个执行过程。\n"}}